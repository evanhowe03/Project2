
public class DataBase {
    // private BinaryTree tree;
    private int worldSize;
    private BinaryTreeID<Seminar> treeID;
    private BinaryTreeCost<Seminar> treeCost;
    private BinaryTreeDate<Seminar> treeDate;
    private BinaryTreeKeyWord<String, Seminar> treeKeyWord;

    public DataBase(int initialSize) {
        // size = worldSize - 1
        worldSize = initialSize;
        treeID = new BinaryTreeID<Seminar>();
        treeCost = new BinaryTreeCost<Seminar>();
        treeDate = new BinaryTreeDate<Seminar>();
        treeKeyWord = new BinaryTreeKeyWord<String, Seminar>();

    }


    public void add(Seminar sem) {
        Seminar trial = sem;

        int x = trial.x();
        int y = trial.y();

        if (x >= 0 && x < worldSize && y >= 0 && y < worldSize) {

            Node<Seminar> insertNode = new Node<Seminar>(trial);
            treeID.insert(trial, treeKeyWord);

            treeCost.insert(trial);
            treeDate.insert(trial);

        }
        else

        {
            System.out.println("Insert FAILED - Bad x, y coordinates: " + x
                + ", " + y);
        }

    }


    public void searchId(int id) {
        treeID.search(treeID.returnRoot(), id);

    }


    public void searchCost(int lowCost, int highCost) {
        System.out.println("Seminars with costs in range " + lowCost + " to "
            + highCost + ":");

        int nodeCount = treeCost.inOrderSearch(treeCost.returnRoot(), lowCost,
            highCost, 1, true);
        System.out.println(nodeCount + " nodes visited in this search");

    }


    public void searchKeyWord(String key) {
        System.out.println("Seminars matching keyword " + key + ":");
        treeKeyWord.inOrderSearch(key, treeKeyWord.returnRoot(), false);

    }


    public void searchDate(String firstDate, String secondDate) {

        System.out.println("Seminars with dates in range " + firstDate + " to "
            + secondDate + ":");
        treeDate.inOrderSearch(treeCost.returnRoot(), firstDate, secondDate, 0,
            true);
    }


    public void searchLocation(int x, int y, int radius) {

    }


    public void delete(int delete) {

    }


    public void printDate() {
        System.out.println("Date Tree:");
        treeDate.printReverse(treeDate.returnRoot(), true, 0);
        if (treeDate.size(treeDate.returnRoot()) > 0) {
            System.out.println("Number of records: " + treeDate.size(treeDate
                .returnRoot()));
        }

    }


    public void printKeyword() {
        System.out.println("Keyword Tree:");
        treeKeyWord.printReverse(treeKeyWord.returnRoot(), true, 0);
        if (treeKeyWord.size(treeKeyWord.returnRoot()) > 0) {
            System.out.println("Number of records: " + treeKeyWord.size(
                treeKeyWord.returnRoot()));
        }
    }


    public void printCost() {
        System.out.println("Cost Tree:");
        treeCost.printReverse(treeCost.returnRoot(), true, 0);
        if (treeCost.size(treeCost.returnRoot()) > 0) {
            System.out.println("Number of records: " + treeCost.size(treeCost
                .returnRoot()));
        }
    }


    public void printID() {
        System.out.println("ID Tree:");
        treeID.printReverse(treeID.returnRoot(), true, 0);
        if (treeID.size(treeID.returnRoot()) > 0) {
            System.out.println("Number of records: " + treeID.size(treeID
                .returnRoot()));
        }
    }


    public void printLocation() {
        System.out.println("Location Tree:");
        System.out.println("E");
    }

}
