
public class DataBase {
    // private BinaryTree tree;
    private int worldSize;
    private BinaryTreeID<Seminar> treeID;
    private BinaryTreeCost<Seminar> treeCost;
    private BinaryTreeDate<Seminar> treeDate;
    private BinaryTreeKeyWord<Seminar> treeKey;

    public DataBase(int initialSize) {
        // size = worldSize - 1
        worldSize = initialSize;
        treeID = new BinaryTreeID<Seminar>();
        treeCost = new BinaryTreeCost<Seminar>();
        treeDate = new BinaryTreeDate<Seminar>();
        treeKey = new BinaryTreeKeyWord<Seminar>();

    }


    public void add(Seminar sem) {
        Seminar trial = sem;

        int x = trial.x();
        int y = trial.y();

        if (x >= 0 && x < worldSize && y >= 0 && y < worldSize) {

            Node<Seminar> insertNode = new Node<Seminar>(trial);
            treeID.insert(trial);
            
            System.out.println("Successfully inserted record with ID " + trial
                .id());
            System.out.println(trial);
           
            treeCost.insert(trial);
            treeDate.insert(trial);
            treeKey.insert(trial);

        }
        else {
            System.out.println("Insert FAILED - Bad x, y coordinates: " + x + ", " + y);
        }
       
    }


    public void searchId(int id) {
        treeID.inOrderSearch(treeID.returnRoot(), id);
    }


    public void searchCost(int lowCost, int highCost) {
        
        int nodeCount = treeCost.inOrderSearch(treeCost.returnRoot(), lowCost, highCost, 1, true);
        System.out.println("Seminars with costs in range " + lowCost + " to " + highCost + ":");
        System.out.println(nodeCount + " nodes visited in this search");

    }


    public void searchKeyWord(String key) {
        System.out.println("Seminars matching keyword " + key + ":");
        treeKey.inOrderSearch(treeKey.returnRoot(), key, true);
    }


    public void searchDate(String firstDate, String secondDate) {
        
        System.out.println("Seminars with dates in range " + firstDate 
            + " to " + secondDate + ":");
        treeDate.inOrderSearch(treeCost.returnRoot(), firstDate, secondDate, true);
    }


    public void searchLocation(int x, int y, int radius) {

    }


    public void delete(int delete) {

    }


    public void printDate() {

    }


    public void printKeyword() {
    }


    public void printCost() {

    }


    public void printID() {

    }


    public void printLocation() {
    }

}
