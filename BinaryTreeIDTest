
/**
 * 
 */
import student.TestCase;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;

/**
 * 
 */
public class BinaryTreeIDTest extends TestCase {
    private BinaryTreeID<Seminar> tree;
    private BinaryTreeKeyWord<String, Seminar> treeKey;
    private Seminar sem;
    private final ByteArrayOutputStream outputStreamCaptor =
        new ByteArrayOutputStream();

    private Seminar sem1;
    private Seminar sem2;
    private Seminar sem3;
    private Seminar sem5;
    private Seminar sem6;
    private Seminar sem7;
    private Seminar sem8;

    public void setUp() {

        tree = new BinaryTreeID<Seminar>();
        treeKey = new BinaryTreeKeyWord<String, Seminar>();
        System.setOut(new PrintStream(outputStreamCaptor));

        String title = "fish"; // Seminar title
        String date = "0610071600"; // Seminar date
        int length = 30; // Seminar length
        String[] keywords = { "fish", "hampster", "wheel" }; // Seminar keywords
        short x = 60; // Seminar x coord
        short y = 20; // Seminar y coord
        String desc =
            "Introduction to   bioinformatics and computation biology"; // Seminar
                                                                        // description
        int cost = 300; // Seminar cost
        int id = 1; // Seminar ID

        sem = new Seminar(id, title, date, length, x, y, cost, keywords, desc);
        sem1 = new Seminar(0, title, "0610081600", length, x, y, 20, keywords,
            desc);
        sem2 = new Seminar(3, title, "0210071600", length, x, y, 30, keywords,
            desc);
        sem3 = new Seminar(4, title, "0810071900", length, x, y, 40, keywords,
            desc);
        sem5 = new Seminar(7, title, date, length, x, y, cost, keywords, desc);
        sem6 = new Seminar(6, title, "0610081600", length, x, y, 20, keywords,
            desc);
        sem7 = new Seminar(9, title, "0210071600", length, x, y, 30, keywords,
            desc);
        sem8 = new Seminar(5, title, "0810071900", length, x, y, 40, keywords,
            desc);

    }


    public void testInsert() {

        tree.insert(sem, treeKey);

        tree.insert(sem, treeKey);

        String printedText = outputStreamCaptor.toString();
        assertFuzzyEquals(printedText,
            "successfully inserted record with id 1\r\n" + "id 1 title fish\r\n"
                + "date 0610071600 length 30 x 60 y 20 cost 300\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "insert failed there is already a record with id 1");
        // assertFuzzyEquals(print, sem.toString());

    }


    public void testInsert1() {
        tree.insert(sem, treeKey);
        tree.insert(sem1, treeKey);
        tree.insert(sem2, treeKey);
        tree.insert(sem3, treeKey);

        String printedText = outputStreamCaptor.toString();
        assertFuzzyEquals(printedText,
            "successfully inserted record with id 1\r\n" + "id 1 title fish\r\n"
                + "date 0610071600 length 30 x 60 y 20 cost 300\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 0\r\n"
                + "id 0 title fish\r\n"
                + "date 0610081600 length 30 x 60 y 20 cost 20\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 3\r\n"
                + "id 3 title fish\r\n"
                + "date 0210071600 length 30 x 60 y 20 cost 30\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 4\r\n"
                + "id 4 title fish\r\n"
                + "date 0810071900 length 30 x 60 y 20 cost 40\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel");

    }


    public void testInOrderSearch() {
        tree.insert(sem, treeKey);
        tree.insert(sem1, treeKey);
        tree.insert(sem2, treeKey);
        tree.insert(sem3, treeKey);
        tree.insert(sem8, treeKey);
        tree.insert(sem5, treeKey);
        tree.insert(sem6, treeKey);
        tree.insert(sem7, treeKey);

        tree.search(tree.returnRoot(), 5);
        tree.search(tree.returnRoot(), 9);

        String printedText = outputStreamCaptor.toString();

        assertFuzzyEquals(printedText,
            "successfully inserted record with id 1\r\n" + "id 1 title fish\r\n"
                + "date 0610071600 length 30 x 60 y 20 cost 300\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 0\r\n"
                + "id 0 title fish\r\n"
                + "date 0610081600 length 30 x 60 y 20 cost 20\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 3\r\n"
                + "id 3 title fish\r\n"
                + "date 0210071600 length 30 x 60 y 20 cost 30\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 4\r\n"
                + "id 4 title fish\r\n"
                + "date 0810071900 length 30 x 60 y 20 cost 40\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 5\r\n"
                + "id 5 title fish\r\n"
                + "date 0810071900 length 30 x 60 y 20 cost 40\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 7\r\n"
                + "id 7 title fish\r\n"
                + "date 0610071600 length 30 x 60 y 20 cost 300\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 6\r\n"
                + "id 6 title fish\r\n"
                + "date 0610081600 length 30 x 60 y 20 cost 20\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 9\r\n"
                + "id 9 title fish\r\n"
                + "date 0210071600 length 30 x 60 y 20 cost 30\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "found record with id 5\r\n" + "id 5 title fish\r\n"
                + "date 0810071900 length 30 x 60 y 20 cost 40\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "found record with id 9\r\n" + "id 9 title fish\r\n"
                + "date 0210071600 length 30 x 60 y 20 cost 30\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel");
    }


    public void testSize() {
        tree.insert(sem, treeKey);
        tree.insert(sem1, treeKey);
        tree.insert(sem2, treeKey);
        tree.insert(sem3, treeKey);

        assertEquals(4, tree.size(tree.returnRoot()));
    }


    public void testString() {
        tree.insert(sem, treeKey);
        tree.insert(sem1, treeKey);
        tree.insert(sem2, treeKey);
        tree.insert(sem3, treeKey);

        assertFuzzyEquals("id 0 title fish\r\n"
            + "date 0610081600 length 30 x 60 y 20 cost 20\r\n"
            + "description introduction to bioinformatics and computation biology\r\n"
            + "keywords fish hampster wheelid 1 title fish\r\n"
            + "date 0610071600 length 30 x 60 y 20 cost 300\r\n"
            + "description introduction to bioinformatics and computation biology\r\n"
            + "keywords fish hampster wheelid 3 title fish\r\n"
            + "date 0210071600 length 30 x 60 y 20 cost 30\r\n"
            + "description introduction to bioinformatics and computation biology\r\n"
            + "keywords fish hampster wheelid 4 title fish\r\n"
            + "date 0810071900 length 30 x 60 y 20 cost 40\r\n"
            + "description introduction to bioinformatics and computation biology\r\n"
            + "keywords fish hampster wheel", tree.toInOrderString(tree
                .returnRoot()));
    }


    public void testDepth() {
        assertEquals(-1, tree.findDepthRecursive(tree.returnRoot(), 0, 3));
        tree.insert(sem, treeKey);
        tree.insert(sem1, treeKey);
        tree.insert(sem2, treeKey);
        tree.insert(sem3, treeKey);

        assertEquals(0, tree.findDepth(1));

        assertEquals(4, tree.findDepthRecursive(tree.returnRoot(), 0, 3));
    }


    public void testSearch2() {
        tree.inOrderSearch(tree.returnRoot(), 4);
        String printedText = outputStreamCaptor.toString();
        assertFuzzyEquals("", printedText);
        tree.insert(sem, treeKey);
        tree.insert(sem1, treeKey);
        tree.insert(sem2, treeKey);
        tree.insert(sem3, treeKey);
        tree.insert(sem8, treeKey);
        tree.insert(sem5, treeKey);
        tree.insert(sem6, treeKey);
        tree.insert(sem7, treeKey);

        tree.search(tree.returnRoot(), 5);
        tree.search(tree.returnRoot(), 9);

        printedText = outputStreamCaptor.toString();

        assertFuzzyEquals(printedText,
            "successfully inserted record with id 1\r\n" + "id 1 title fish\r\n"
                + "date 0610071600 length 30 x 60 y 20 cost 300\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 0\r\n"
                + "id 0 title fish\r\n"
                + "date 0610081600 length 30 x 60 y 20 cost 20\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 3\r\n"
                + "id 3 title fish\r\n"
                + "date 0210071600 length 30 x 60 y 20 cost 30\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 4\r\n"
                + "id 4 title fish\r\n"
                + "date 0810071900 length 30 x 60 y 20 cost 40\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 5\r\n"
                + "id 5 title fish\r\n"
                + "date 0810071900 length 30 x 60 y 20 cost 40\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 7\r\n"
                + "id 7 title fish\r\n"
                + "date 0610071600 length 30 x 60 y 20 cost 300\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 6\r\n"
                + "id 6 title fish\r\n"
                + "date 0610081600 length 30 x 60 y 20 cost 20\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "successfully inserted record with id 9\r\n"
                + "id 9 title fish\r\n"
                + "date 0210071600 length 30 x 60 y 20 cost 30\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "found record with id 5\r\n" + "id 5 title fish\r\n"
                + "date 0810071900 length 30 x 60 y 20 cost 40\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel\r\n"
                + "found record with id 9\r\n" + "id 9 title fish\r\n"
                + "date 0210071600 length 30 x 60 y 20 cost 30\r\n"
                + "description introduction to bioinformatics and computation biology\r\n"
                + "keywords fish hampster wheel");
    }


    public void testSearch3() {
        tree.insert(sem, treeKey);
        tree.search(tree.returnRoot(), 4);

        String printedText = outputStreamCaptor.toString().trim();

        String expectedOutput = "Successfully inserted record with ID 1\r\n"
            + "ID: 1, Title: fish\r\n"
            + "Date: 0610071600, Length: 30, X: 60, Y: 20, Cost: 300\r\n"
            + "Description: Introduction to   bioinformatics and computation biology\r\n"
            + "Keywords: fish, hampster, wheel\r\n"
            + "Search FAILED -- There is no record with ID 4";
        assertEquals(expectedOutput, printedText);
    }


    public void testSearch4() {

        tree.search(tree.returnRoot(), 4);

        String printedText = outputStreamCaptor.toString().trim();

        String expectedOutput = "Search FAILED -- There is no record with ID 4";
        assertEquals(expectedOutput, printedText);
    }


    public void testReverse() {
        tree.insert(sem, treeKey);
        tree.insert(sem1, treeKey);
        tree.insert(sem2, treeKey);
        tree.insert(sem3, treeKey);

    }


    public void testBST() throws NumberFormatException, Exception {
        SemSearch sem = new SemSearch();
        String[] args = new String[2];
        args[0] = "1024";
        args[1] = "test.txt";

        SemSearch.main(args);

        String printedText = outputStreamCaptor.toString();
        String referenceOutput = readFile("testout.txt");
        assertFuzzyEquals(referenceOutput, printedText);
    }


    public String readFile(String name) {
        String fileFish = "";
        try {

            Scanner scan = new Scanner(new File(name));

            while (scan.hasNextLine()) {
                fileFish += scan.nextLine() + "\n";
            }
            scan.close();
        }
        catch (FileNotFoundException e) {

            e.printStackTrace();
        }

        return fileFish;
    }

}
