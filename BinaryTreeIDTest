
/**
 * 
 */
import student.TestCase;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

/**
 * 
 */
public class BinaryTreeIDTest extends TestCase {
    private BinaryTreeID<Seminar> tree;
    private Seminar sem;
    private final ByteArrayOutputStream outputStreamCaptor =
        new ByteArrayOutputStream();
    private Seminar sem1;
    private Seminar sem2;
    private Seminar sem3;

    public void setUp() {

        tree = new BinaryTreeID<Seminar>();
        
        System.setOut(new PrintStream(outputStreamCaptor));
        
        String title = "fish"; // Seminar title
        String date = "0610071600"; // Seminar date
        int length = 30; // Seminar length
        String[] keywords = { "fish", "hampster", "wheel" }; // Seminar keywords
        short x = 60; // Seminar x coord
        short y = 20; // Seminar y coord
        String desc =
            "Introduction to   bioinformatics and computation biology"; // Seminar
                                                                        // description
        int cost = 300; // Seminar cost
        int id = 1; // Seminar ID
        
        sem = new Seminar(id, title, date, length, x, y, cost, keywords, desc);
        sem1 = new Seminar(0, title, date, length, x, y, 20, keywords, desc);
        sem2 = new Seminar(3, title, date, length, x, y, 30, keywords, desc);
        sem3 = new Seminar(4, title, date, length, x, y, 40, keywords, desc);
    
    }


    public void testInsert() {
        
        tree.insert(sem);

        tree.insert(sem);
        
        String print = tree.toPreOrderString(tree.returnRoot());
        
        System.out.println(print);

        String printedText = outputStreamCaptor.toString();
        assertFuzzyEquals(printedText,
            "Insert FAILED - There is already a record with ID " + sem.id() + "\n" + sem.toString());
        //assertFuzzyEquals(print, sem.toString());

    }
    
    public void testInsert1() {
        tree.insert(sem);
        tree.insert(sem1);
        tree.insert(sem2);
        tree.insert(sem3);
        
        String print = tree.toInOrderString(tree.returnRoot());
        
        System.out.println(print);

        String printedText = outputStreamCaptor.toString();
        assertFuzzyEquals(printedText, sem1.toString() + sem.toString() +sem2.toString() +sem3.toString());
   
    }
    
    public void testInOrderSearch() {
        tree.insert(sem);
        tree.insert(sem1);
        tree.insert(sem2);
        tree.insert(sem3);
        
        tree.inOrderSearch(tree.returnRoot(), 3);
        tree.inOrderSearch(tree.returnRoot(), 0);
        
        String printedText = outputStreamCaptor.toString();
        

        assertFuzzyEquals(printedText, "Found record with ID 3:\n" + sem2.toString() + 
            "\nFound record with ID 0:\n" + sem1.toString());
    }



}
