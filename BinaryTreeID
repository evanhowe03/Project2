
// -------------------------------------------------------------------------
/**
 * 
 * Represents a binary tree of arbitrary structure. This class is different
 * 
 * from those in the textbook. It does not use a separate node class.
 * 
 *
 * 
 * 
 * @param <T>
 * 
 *            The type of data elements contained in the tree.
 * 
 *
 * 
 *            Created by: John Lewis (lewis63) and Stephen Edwards (stedwar2)
 * 
 *            Revised (2015.04.30) by: Megan Rigsbee (mrigsbee)
 * 
 * 
 * 
 * @author <Evan Howe> <evanhowe03>
 * 
 * @version <11/16/2022>
 * 
 */

public class BinaryTreeID<T> {

    private Node<Seminar> root;

    public BinaryTreeID() {
        // instantiate root node
        root = null;
    }


    // ----------------------------------------------------------
    /**
     * 139
     * Calculate the size of this binary tree.
     * 140
     * 
     * 141
     * 
     * @return The size of this tree.
     *         142
     */
    public int size(Node<T> root) {

        int size = 1;

        if (root.getLeft() == null && root.getRight() == null) {

            return size;

        }

        if (root.getLeft() != null) {

            size = size + size(root.getLeft());

        }

        if (root.getRight() != null) {

            size = size + size(root.getRight());

        }

        return size;

        // Base case: current node has 0 children

        // Recursive Case 1: current node has 1 child on the left

        // Recursive Case 2: current node has 1 child on the right

        // Recursive Case 3: current node has 2 children

    }


    public void insert(Seminar val) {
        root = insertRec(root, val);
    }


    private Node<Seminar> insertRec(Node<Seminar> root, Seminar val) {
        if (root == null) {
            root = new Node<Seminar>(val);
            // System.out.println(val);
            return root;
        }

        if (val.id() == root.getElement().id()) {
            // collision
            System.out.println(
                "Insert FAILED - There is already a record with ID " + val
                    .id());
        }
        else if (val.id() < root.getElement().id()) {
            root.setLeft(insertRec(root.getLeft(), val));
        }
        else {
            root.setRight(insertRec(root.getRight(), val));
        }
        // System.out.println(val);
        return root;
    }


    public Node<Seminar> returnRoot() {
        return root;
    }


    public boolean inOrderSearch(Node<Seminar> root, int key) {
        if (root == null) {
            return false;
        }

        if (root.getElement().id() == key) {
            System.out.println("Found record with ID " + key + ":");
            System.out.println(root.getElement());
            return true;
        }

        boolean left = false;
        boolean right = false;

        if (root.getLeft() != null) {
            left = inOrderSearch(root.getLeft(), key);
        }

        if (root.getRight() != null) {
            right = inOrderSearch(root.getRight(), key);
        }

        return left || right;
    }


    public void search(Node<Seminar> root, int key) {
        if (!inOrderSearch(root, key)) {
            System.out.println("Search FAILED -- There is no record with ID "
                + key);
        }
    }


    public int findDepth(int key) {
        return findDepthRecursive(root, key, 0);
    }


    public int findDepthRecursive(Node<Seminar> node, int key, int depth) {
        if (node == null) {
            return -1;
        }

        if (key == node.getElement().id()) {
            return depth;
        }

        if (key < node.getElement().id()) {
            return findDepthRecursive(node.getLeft(), key, depth + 1);
        }
        else {
            return findDepthRecursive(node.getRight(), key, depth + 1);
        }
    }


    // ----------------------------------------------------------
    /**
     * 168
     * Calculate the height of this binary tree.
     * 169
     * The height is longest path from the root to
     * 170
     * a leaf node.
     * 171
     * Examples:
     * 172
     * A A A
     * 173
     * / / \
     * 174
     * B B C
     * 175
     * Height: 1 2 2
     * 176
     * 
     * 177
     * 
     * @return The height of this tree.
     *         178
     */

    public int height(Node<T> root) {

        int height = 1; // base case returns 1 for height

        if (root.getLeft() == null && root.getRight() == null) {

            return 1;

        }

        if (root.getLeft() != null) {

            height = Math.max(height, 1 + height(root.getLeft()));

        }

        if (root.getRight() != null) {

            height = Math.max(height, 1 + height(root.getRight()));

        }

        return height;

    }


    // ----------------------------------------------------------
    /**
     * 232
     * Generate a string containing the "printed version" of this binary
     * 233
     * tree using a in-order traversal. The tree's contents are printed as
     * 234
     * a parenthesized list.
     * 235
     * 
     * 236
     * Example: ((B)A(C))
     * 237
     * Visually: A
     * 238
     * / \ Traversal: B A C
     * 239
     * B C
     * 240
     * 
     * 241
     * 
     * @return a printable representation of this tree's contents, using
     *         242
     *         an in-order traversal.
     *         243
     */

    public String toInOrderString(Node<T> root) {

        StringBuilder builder = new StringBuilder();

        builder.append("(");

        if (root.getLeft() != null) {

            builder.append(toInOrderString(root.getLeft()));

        }

        builder.append(root.getElement());

        if (root.getRight() != null) {

            builder.append(toInOrderString(root.getRight()));
        }

        builder.append(")");

        return builder.toString();

    }

}
