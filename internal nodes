/**
 * 
 */

/**
 * 
 */
public class IntlNode implements BinNode {

    private BinNode left; // Left child
    private BinNode right; // Right child
    // private Seminar operator; // Operator value

    public IntlNode(BinNode l, BinNode r) {
        // operator = sem;
        left = l;
        right = r;
    }


    @Override
    public BinNode insert(
        Seminar sem,
        int widthLow,
        int widthHigh,
        int heightLow,
        int heightHigh,
        int level) {

        if (level % 2 == 0) {
            int diff = (widthHigh - widthLow) / 2;
            if (sem.x() <= diff + widthLow && sem.x() >= widthLow && sem.y() >= heightLow
                && sem.y() <= heightHigh) {

                left = left.insert(sem, widthLow, widthLow + diff, heightLow,
                    heightHigh, level + 1);

            }
            else {
                right = right.insert(sem, widthLow + diff, widthHigh, heightLow,
                    heightHigh, level + 1);
            }

        }
        else {
            int diff = (heightHigh - heightLow) / 2;
            if (sem.y() <= diff + heightLow && sem.y() >= heightLow && sem.x() >= widthLow
                && sem.x() <= widthHigh) {

                left = left.insert(sem, widthLow, widthHigh, heightLow,
                    heightLow + diff, level + 1);
            }
            else {
                right = right.insert(sem, widthLow, widthHigh, heightLow + diff,
                    heightHigh, level + 1);
            }
        }

        return this;
    }


    public BinNode left() {
        return left;
    }


    public BinNode rightchild() {
        return right;
    }


    @Override
    public boolean isLeaf() {
        // TODO Auto-generated method stub
        return false;
    }


    @Override
    public boolean isEmpty() {
        // TODO Auto-generated method stub
        return false;
    }


    @Override
    public int search() {
        // TODO Auto-generated method stub
        return 0;
    }


    @Override
    public BinNode delete(int x, int y, Seminar sem) {
        //check if there's a leaf node
        if (left.isLeaf() && right.isEmpty()) {
            left = left.delete(x, y, sem);
            if (left.isEmpty()) {
                return right;
            }
        }
        else if (right.isLeaf() && left.isEmpty()) {
            right = right.delete(x, y, sem);
            if (right.isEmpty()) {
                return left;
            }
        }
        else {
            left = left.delete(x, y, sem);
            right = right.delete(x, y, sem);
        }
         //then undo the split from insert
        
        return this;
    }


    @Override
    public void print(int level) {
        for (int i = 0; i < level * 2; i++) {
            System.out.print(" ");
        }
        System.out.println("I");

        // Now, print the left child
        if (left != null) {
            left.print(level + 1);
        }

        // And then print the right child
        if (right != null) {
            right.print(level + 1);
        }

    }

}
