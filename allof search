
iNternal

@Override
    public int search(int x, int y, int dist, int widthLow, int widthHigh, int heightLow, int heightHigh, int level, int nodesVisited) {
       int nodes = 1;
       
       int disc = level % 2;
       if (disc == 0) {
           int diff = (widthHigh - widthLow)/ 2;
           
           //diff == x
           //intersects(x, y, dist, widthLow, diff, heightLow, heightHigh)
           if ((x - dist) < widthLow) {
               nodes += left.search(x, y, dist, widthLow, widthLow + diff, heightLow, heightHigh, level + 1, nodesVisited);
           }
           //x-dist + (2*dist +1) < widthLow + diff
           //intersects(x, y, dist, widthLow + diff, diff, heightLow, heightHigh)
           if (((x - dist) + 2*dist+1) > widthLow) {
               nodes += right.search(x, y, dist, widthLow + diff , widthHigh, heightLow, heightHigh, level + 1, nodesVisited);
           }
           
       }
       else {
           int diff = (heightHigh - heightLow) / 2;
           //intersects(x, y, dist, widthLow, widthHigh, heightLow, diff)
           if ((y - dist) < heightLow) {
               nodes += left.search(x, y, dist, widthLow, widthLow, heightLow, heightLow + diff, level + 1, nodesVisited);
               
           }
           //intersects(x, y, dist, widthLow, widthHigh, heightLow + diff, diff)
           if (((y - dist) + 2*dist+1) > heightLow) {
               nodes += right.search(x, y, dist, widthLow, widthHigh, heightLow + diff, heightHigh, level + 1, nodesVisited);
           }
       }
       
       return nodes;
    }


Empty 

 @Override
    public int search(int x, int y, int dist, int widthLow, int widthHigh, int heightLow, int heightHigh, int level, int nodesVisited) {
        return 1;

    }


Leaf

@Override
    public int search(
        int x,
        int y,
        int dist,
        int widthLow,
        int widthHigh,
        int heightLow,
        int heightHigh,
        int level,
        int nodesVisited) {
        // check if the location of the seminar is less
        // than or equal to radius distance from the search point.
        // Euclidian's algorithm
        int aX = x;
        int aY = y;
        int bX = list.get(0).x();
        int bY = list.get(0).y();
        double xPower = Math.pow((aX - bX), 2);
        double yPower = Math.pow((aY - bY), 2);
        double result = Math.sqrt(xPower + yPower);

        if (result <= dist) {
            // if it is IDK maybe print the found message
            for (int i = 0; i < list.size(); i++) {
                System.out.println("Found a record with key value " + list.get(
                    i).id() + " at " + list.get(i).x() + ", " + list.get(i)
                        .y());
            }

        }

        return 1;
    }


Aintree


 public int search(int x, int y, int dist, int size) {
        int count = root.search(x, y, dist, 0, size, 0, size, 0, 0);
        return count;
    }


Interface

 public int search(int x, int y, int dist, int widthLow, int widthHigh, int heightLow, int heightHigh, int level, int nodesVisited);


Database

 public void searchLocation(int x, int y, int radius) {
        System.out.println("Seminars within " + radius + 
            " units of " + x + ", " + y + ":");
        int nodes = locationTree.search(x, y, radius, worldSize);
        
        System.out.println(nodes + " nodes visited in this search");
    }
