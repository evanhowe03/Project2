
/**
 * 
 */

import java.util.Comparator;

/**
 * 
 */
public class BinaryTreeDate<K, V> implements Comparator<BinaryTreeDate<K, V>> {

    private NodeK<String, Seminar> root;

    public BinaryTreeDate() {
        // instantiate root node
        root = null;
    }


    // ----------------------------------------------------------
    /**
     * 139
     * Calculate the size of this binary tree.
     * 140
     * 
     * 141
     * 
     * @return The size of this tree.
     *         142
     */
    public int size(NodeK<String, Seminar> root) {
        if (root == null) {
            return 0;
        }
        int size = 1;

        if (root.getLeft() == null && root.getRight() == null) {

            return size;

        }

        if (root.getLeft() != null) {

            size = size + size(root.getLeft());

        }

        if (root.getRight() != null) {

            size = size + size(root.getRight());

        }

        return size;

        // Base case: current node has 0 children

        // Recursive Case 1: current node has 1 child on the left

        // Recursive Case 2: current node has 1 child on the right

        // Recursive Case 3: current node has 2 children

    }


    public void insert(Seminar val) {
        root = insertRec(root, val, val.date());
    }


    private NodeK<String, Seminar> insertRec(
        NodeK<String, Seminar> root,
        Seminar val,
        String id) {
        if (root == null) {
            root = new NodeK<String, Seminar>(id, val);
            // System.out.println(val);
            return root;
        }

        if (val.id() == root.getElement().id()) {
            // collision
            return root;
        }
        else if (compareSem(val, root.getElement()) == -1 || compareSem(val,
            root.getElement()) == 0) {
            root.setLeft(insertRec(root.getLeft(), val, id));
        }
        else {
            root.setRight(insertRec(root.getRight(), val, id));
        }
        // System.out.println(val);
        return root;
    }


    public NodeK<String, Seminar> returnRoot() {
        return root;
    }

    /*
     * public int inOrderSearch(
     * Node<Seminar> root,
     * String lowDate,
     * String highDate,
     * int nodeCount,
     * boolean groot) {
     * int counter = 1;
     * if (root == null) {
     * 
     * return counter;
     * }
     * 
     * long low = Long.parseLong(lowDate + "000000000");
     * long high = Long.parseLong(highDate + "000000000");
     * 
     * long date = Long.parseLong(root.getElement().date());
     * 
     * // Process the current node if it's within range
     * 
     * if (date > low) {
     * counter += inOrderSearch(root.getLeft(), lowDate, highDate, 0,
     * true);
     * }
     * if (date >= low && date <= high) {
     * System.out.println(root.getElement());
     * 
     * }
     * 
     * // Search in the right subtree
     * if (date < high) {
     * counter += inOrderSearch(root.getRight(), lowDate, highDate, 0,
     * true);
     * }
     * 
     * return counter;
     * }
     */


    public int inOrderSearch(
        NodeK<String, Seminar> root,
        String lowDate,
        String highDate) {
        int counter = 1;
        if (root == null) {

            return 1;
        }

        if (root.getKey().compareTo(lowDate) < 0) {
            counter += inOrderSearch(root.getRight(), lowDate, highDate);
        }

        else if (root.getKey().compareTo(highDate) > 0) {

            counter += inOrderSearch(root.getLeft(), lowDate, highDate);
        }
        else {
            counter += inOrderSearch(root.getLeft(), lowDate, highDate);
            System.out.println(root.getElement());

            if (root.getKey().compareTo(highDate) != 0) {
                counter += inOrderSearch(root.getRight(), lowDate, highDate);
            }
        }
        return counter;
    }


    // ----------------------------------------------------------
    /**
     * 168
     * Calculate the height of this binary tree.
     * 169
     * The height is longest path from the root to
     * 170
     * a leaf node.
     * 171
     * Examples:
     * 172
     * A A A
     * 173
     * / / \
     * 174
     * B B C
     * 175
     * Height: 1 2 2
     * 176
     * 
     * 177
     * 
     * @return The height of this tree.
     *         178
     */

    public int height(NodeK<String, Seminar> root) {

        int height = 1; // base case returns 1 for height

        if (root.getLeft() == null && root.getRight() == null) {

            return 1;

        }

        if (root.getLeft() != null) {

            height = Math.max(height, 1 + height(root.getLeft()));

        }

        if (root.getRight() != null) {

            height = Math.max(height, 1 + height(root.getRight()));

        }

        return height;

    }


    public String toInOrderString(NodeK<String, Seminar> root) {

        StringBuilder builder = new StringBuilder();

        builder.append("(");

        if (root.getLeft() != null) {

            builder.append(toInOrderString(root.getLeft()));

        }

        builder.append(root.getElement());

        if (root.getRight() != null) {

            builder.append(toInOrderString(root.getRight()));
        }

        builder.append(")");

        return builder.toString();

    }


    public int compareSem(Seminar val, Seminar seminar) {

        int o1 = Integer.parseInt(val.date());
        int o2 = Integer.parseInt(seminar.date());

        if (o1 > o2) {
            return 1;
        }
        else if (o1 < o2) {
            return -1;
        }
        return 0;

    }


    public void printReverse(
        NodeK<String, Seminar> root,
        boolean groot,
        int level) {

        if (root == null && groot) {
            System.out.println("This tree is empty");
            return;

        }

        if (root.getRight() != null) {

            printReverse(root.getRight(), false, level + 1);

        }
        else {

            for (int y = 0; y <= level; y++) {
                System.out.print("  ");

            }
            System.out.println("null");
        }
        for (int x = 0; x < level; x++) {
            System.out.print("  ");

        }
        String dateLine = root.getKey().trim();
        System.out.println(dateLine);

        if (root.getLeft() != null) {

            printReverse(root.getLeft(), false, level + 1);

        }
        else {

            for (int x = 0; x <= level; x++) {
                System.out.print("  ");

            }
            System.out.println("null");
        }

    }


    @Override
    public int compare(BinaryTreeDate<K, V> o1, BinaryTreeDate<K, V> o2) {
        // TODO Auto-generated method stub
        return 0;
    }


    public void delete(int id) {
        root = deleteRec(id, root);
    }


    public NodeK<String, Seminar> deleteRec(int id,
        NodeK<String, Seminar> root
        ) {

        if (root == null) {
            return root;
        }

        root.setLeft(deleteRec(id, root.getLeft()));

        if (root.getElement().id() == id) {

            if (root.getLeft() == null) {

                return root.getRight();

            }

            else if (root.getRight() == null) {

                return root.getLeft();

            }

            root.setKey(maxValue(root.getLeft()));

            root.setValue(maxSem(root.getLeft()));

            root.setLeft(deleteRec(id, root.getLeft()));

        }

        root.setRight(deleteRec(id, root.getRight()));

        return root;
    }


    // returns the date in the lowest node
    public String maxValue(NodeK<String, Seminar> root) {
        String maxValue = root.getElement().date();
        while (root.getRight() != null) {
            maxValue = root.getRight().getElement().date();
            root = root.getRight();
        }
        return maxValue;
    }


    // returns the seminar in the lowest node
    public Seminar maxSem(NodeK<String, Seminar> root) {
        Seminar maxSem = root.getElement();
        while (root.getRight() != null) {
            maxSem = root.getRight().getElement();
            root = root.getRight();
        }
        return maxSem;
    }

}
