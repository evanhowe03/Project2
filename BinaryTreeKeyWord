
/**
 * 
 */

import java.util.Comparator;
import java.util.Arrays;

/**
 * 
 */
public class BinaryTreeKeyWord<K, V>
    implements Comparable<BinaryTreeKeyWord<K, V>> {

    private NodeK<String, Seminar> root;

    public BinaryTreeKeyWord() {
        // instantiate root node
        root = null;
    }


    // ----------------------------------------------------------
    /**
     * 139
     * Calculate the size of this binary tree.
     * 140
     * 
     * 141
     * 
     * @return The size of this tree.
     *         142
     */
    public int size(NodeK<K, V> root) {

        if (root == null) {
            return 0;
        }

        int size = 1;

        if (root.getLeft() != null) {
            size += size(root.getLeft());
        }

        if (root.getRight() != null) {
            size += size(root.getRight());
        }

        return size;
    }


    public void insert(Seminar val, String word) {
      
        root = insertRec(root, word, val);
    }


    private NodeK<String, Seminar> insertRec(

        NodeK<String, Seminar> root,
        String word,
        Seminar val) {
        
        if (root == null) {
            root = new NodeK<String, Seminar>(word, val);
            // System.out.println(val);
            return root;
        }
      

        if (compareSem(word, root.getKey()) == 0) {
            root.setLeft(insertRec(root.getLeft(), word, val));

        }
        else if (compareSem(word, root.getKey()) == 1) {
            root.setRight(insertRec(root.getRight(), word, val));
        }
        else {
            root.setLeft(insertRec(root.getLeft(), word, val));
        }

 
        return root;

    }


    public NodeK<String, Seminar> returnRoot() {
        return root;
    }


    public String toInOrderString(NodeK<K, V> root) {

        if (root == null) {
            return "";
        }
        StringBuilder builder = new StringBuilder();

        builder.append("(");

        if (root.getLeft() != null) {

            builder.append(toInOrderString(root.getLeft()));

        }

        builder.append(root.getElement());

        if (root.getRight() != null) {

            builder.append(toInOrderString(root.getRight()));
        }

        builder.append(")");

        return builder.toString();

    }


    // ----------------------------------------------------------
    /**
     * 263
     * Generate a string containing the "printed version" of this binary
     * 264
     * tree using a post-order traversal. The tree's contents are printed
     * 265
     * as a parenthesized list.
     * 266
     * 
     * 267
     * For example, if a tree containing the data
     * 268
     * value A has a left child containing B and a right child containing C,
     * 269
     * it would be printed as ((B)(C)A).
     * 270
     * Visually: A
     * 271
     * / \ Traversal: B C A
     * 272
     * B C
     * 273
     * 
     * 274
     * The parentheses directly reflect
     * 275
     * the structure of each node in the tree.
     * 276
     * 
     * 277
     * 
     * @return a printable representation of this tree's contents, using
     *         278
     *         a post-order traversal.
     *         279
     */

    public int compareSem(String key, String word) {

        int compare = key.compareTo(word);
        if (compare == 0) {

            return compare;
        }
        else if (compare < 0) {
            return -1;
        }
        else {

            return 1;
        }

    }


    public void inOrderSearch(
        String keyWords,
        NodeK<String, Seminar> root,
        boolean groot) {
        if (root == null) {
            return;
        }
        for (int x = 0; x < root.getElement().keywords().length; x++) {
            if (root.getElement().keywords()[x].equals(keyWords) && groot) {

                System.out.println(root.getElement());
            }

        }

        if (root.getLeft() != null) {
            for (int x = 0; x < root.getLeft().getElement()
                .keywords().length; x++) {
                if (root.getLeft().getElement().keywords()[x].equals(
                    keyWords)) {

                    System.out.println(root.getLeft().getElement());
                }

            }

            // only included the else statements in the key tree
            inOrderSearch(keyWords, root.getLeft(), false);

        }

        if (root.getRight() != null) {
            for (int x = 0; x < root.getRight().getElement()
                .keywords().length; x++) {
                if (root.getRight().getElement().keywords()[x].equals(
                    keyWords)) {

                    System.out.println(root.getRight().getElement());
                }

            }

            inOrderSearch(keyWords, root.getRight(), false);

        }

    }

    /*
     * public void printReverse(NodeK<String, Seminar> root, boolean groot) {
     * 
     * if (root == null && groot) {
     * System.out.println("This tree is empty");
     * return;
     * 
     * }
     * 
     * if (root.getRight() != null) {
     * 
     * printReverse(root.getRight(), false);
     * 
     * 
     * }
     * else {
     * 
     * for (int y = 0; y <= findDepth(root.getKey()); y++) {
     * System.out.print("  ");
     * 
     * }
     * System.out.println("null");
     * }
     * for (int x = 0; x < findDepth(root.getKey()); x++) {
     * System.out.print("  ");
     * 
     * }
     * System.out.println(root.getKey());
     * 
     * if (root.getLeft() != null) {
     * 
     * printReverse(root.getLeft(), false);
     * 
     * }
     * else {
     * 
     * for (int x = 0; x <= findDepth(root.getKey()); x++) {
     * System.out.print("  ");
     * 
     * }
     * System.out.println("null");
     * }
     * 
     * }
     */


    @Override
    public int compareTo(BinaryTreeKeyWord<K, V> o) {
        // TODO Auto-generated method stub
        return 0;
    }


    public void printReverse(
        NodeK<String, Seminar> root,
        boolean groot,
        int level) {

        if (root == null && groot) {
            System.out.println("This tree is empty");
            return;

        }

        if (root.getRight() != null) {

            printReverse(root.getRight(), false, level + 1);

        }
        else {

            for (int y = 0; y <= level; y++) {
                System.out.print("  ");

            }
            System.out.println("null");
        }
        for (int x = 0; x < level; x++) {
            System.out.print("  ");

        }
        System.out.println(root.getKey());

        if (root.getLeft() != null) {

            printReverse(root.getLeft(), false, level + 1);

        }
        else {

            for (int x = 0; x <= level; x++) {
                System.out.print("  ");

            }
            System.out.println("null");
        }

    }

}
